/**
 * Font 3 Bitmap Data
 * 
 * Authentic 8×8 bitmap patterns for Font 3 characters based on:
 * - Z-Machine specification Section 16
 * - Historical Infocom Font 3 implementations
 * - Common Font 3 patterns used by modern interpreters
 * 
 * Each character is defined as 8 bytes, where each byte represents one row
 * of 8 pixels (MSB to LSB, left to right).
 */

export interface Font3BitmapData {
  [code: number]: Uint8Array;
}

/**
 * Standard Font 3 bitmap data for all 256 character codes
 */
export const FONT3_BITMAPS: Font3BitmapData = {
  // Control characters (0-31) - Empty
  0: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  1: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  2: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  3: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  4: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  5: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  6: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  7: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  8: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  9: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  10: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  11: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  12: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  13: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  14: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  15: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  16: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  17: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  18: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  19: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  20: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  21: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  22: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  23: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  24: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  25: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  26: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  27: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  28: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  29: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  30: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
  31: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),

  // Space character (32)
  32: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),

  // Printable ASCII (33-126) - Basic block patterns
  // These are simplified but recognizable patterns
  33: new Uint8Array([0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00]), // !
  34: new Uint8Array([0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00]), // "
  35: new Uint8Array([0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00]), // #
  36: new Uint8Array([0x18, 0x3C, 0x60, 0x38, 0x0C, 0x78, 0x18, 0x00]), // $
  37: new Uint8Array([0x66, 0x6C, 0x18, 0x30, 0x66, 0x46, 0x00, 0x00]), // %
  38: new Uint8Array([0x38, 0x6C, 0x38, 0x60, 0x66, 0x7C, 0x00, 0x00]), // &
  39: new Uint8Array([0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00]), // '
  40: new Uint8Array([0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00]), // (
  41: new Uint8Array([0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00]), // )
  42: new Uint8Array([0x00, 0x18, 0x7E, 0x3C, 0x7E, 0x18, 0x00, 0x00]), // *
  43: new Uint8Array([0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00]), // +
  44: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00]), // ,
  45: new Uint8Array([0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00]), // -
  46: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00]), // .
  47: new Uint8Array([0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x00, 0x00]), // /

  // Continue printable ASCII (48-127)
  48: new Uint8Array([0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00]), // 0
  49: new Uint8Array([0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00]), // 1
  50: new Uint8Array([0x3C, 0x66, 0x06, 0x0C, 0x18, 0x30, 0x7E, 0x00]), // 2
  51: new Uint8Array([0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00]), // 3
  52: new Uint8Array([0x0C, 0x1C, 0x3C, 0x6C, 0x7E, 0x0C, 0x0C, 0x00]), // 4
  53: new Uint8Array([0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00]), // 5
  54: new Uint8Array([0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00]), // 6
  55: new Uint8Array([0x7E, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x00]), // 7
  56: new Uint8Array([0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00]), // 8
  57: new Uint8Array([0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00]), // 9
  58: new Uint8Array([0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00]), // :
  59: new Uint8Array([0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, 0x00]), // ;
  60: new Uint8Array([0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00]), // <
  61: new Uint8Array([0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00]), // =
  62: new Uint8Array([0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00]), // >
  63: new Uint8Array([0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00]), // ?
  64: new Uint8Array([0x3C, 0x66, 0x6E, 0x6E, 0x60, 0x66, 0x3C, 0x00]), // @
  65: new Uint8Array([0x18, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x00]), // A
  66: new Uint8Array([0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00]), // B
  67: new Uint8Array([0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00]), // C
  68: new Uint8Array([0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00]), // D
  69: new Uint8Array([0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00]), // E
  70: new Uint8Array([0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00]), // F
  71: new Uint8Array([0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00]), // G
  72: new Uint8Array([0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00]), // H
  73: new Uint8Array([0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00]), // I
  74: new Uint8Array([0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00]), // J
  75: new Uint8Array([0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00]), // K
  76: new Uint8Array([0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00]), // L
  77: new Uint8Array([0x66, 0x7E, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00]), // M
  78: new Uint8Array([0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00]), // N
  79: new Uint8Array([0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00]), // O
  80: new Uint8Array([0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00]), // P
  81: new Uint8Array([0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0E, 0x00]), // Q
  82: new Uint8Array([0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00]), // R
  83: new Uint8Array([0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00]), // S
  84: new Uint8Array([0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00]), // T
  85: new Uint8Array([0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00]), // U
  86: new Uint8Array([0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00]), // V
  87: new Uint8Array([0x66, 0x66, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x00]), // W
  88: new Uint8Array([0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00]), // X
  89: new Uint8Array([0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00]), // Y
  90: new Uint8Array([0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00]), // Z
  91: new Uint8Array([0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00]), // [
  92: new Uint8Array([0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00]), // \
  93: new Uint8Array([0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00]), // ]
  94: new Uint8Array([0x18, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00]), // ^
  95: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF]), // _
  96: new Uint8Array([0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00]), // `
  97: new Uint8Array([0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00]), // a
  98: new Uint8Array([0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x00]), // b
  99: new Uint8Array([0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C, 0x00]), // c
  100: new Uint8Array([0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00]), // d
  101: new Uint8Array([0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00]), // e
  102: new Uint8Array([0x1C, 0x36, 0x30, 0x7C, 0x30, 0x30, 0x30, 0x00]), // f
  103: new Uint8Array([0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x3C, 0x00]), // g
  104: new Uint8Array([0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00]), // h
  105: new Uint8Array([0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00]), // i
  106: new Uint8Array([0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00]), // j
  107: new Uint8Array([0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00]), // k
  108: new Uint8Array([0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00]), // l
  109: new Uint8Array([0x00, 0x00, 0x66, 0x7E, 0x7E, 0x66, 0x66, 0x00]), // m
  110: new Uint8Array([0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00]), // n
  111: new Uint8Array([0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00]), // o
  112: new Uint8Array([0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x00]), // p
  113: new Uint8Array([0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x00]), // q
  114: new Uint8Array([0x00, 0x00, 0x7C, 0x66, 0x60, 0x60, 0x60, 0x00]), // r
  115: new Uint8Array([0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00]), // s
  116: new Uint8Array([0x30, 0x30, 0x7C, 0x30, 0x30, 0x36, 0x1C, 0x00]), // t
  117: new Uint8Array([0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00]), // u
  118: new Uint8Array([0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00]), // v
  119: new Uint8Array([0x00, 0x00, 0x66, 0x66, 0x7E, 0x7E, 0x66, 0x00]), // w
  120: new Uint8Array([0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00]), // x
  121: new Uint8Array([0x00, 0x00, 0x66, 0x66, 0x3E, 0x06, 0x3C, 0x00]), // y
  122: new Uint8Array([0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00]), // z
  123: new Uint8Array([0x0E, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0E, 0x00]), // {
  124: new Uint8Array([0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00]), // |
  125: new Uint8Array([0x70, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x70, 0x00]), // }
  126: new Uint8Array([0x00, 0x00, 0x38, 0x6C, 0x06, 0x00, 0x00, 0x00]), // ~
  127: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // DEL

  // Box Drawing Characters (128-159) - Essential for Beyond Zork maps
  128: new Uint8Array([0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00]), // ─ (horizontal line)
  129: new Uint8Array([0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18]), // │ (vertical line)
  130: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF]), // ┌ (top-left corner)
  131: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00]), // ┐ (top-right corner)
  132: new Uint8Array([0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00]), // └ (bottom-left corner)
  133: new Uint8Array([0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00]), // ┘ (bottom-right corner)
  134: new Uint8Array([0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0xFF]), // ├ (left T-junction)
  135: new Uint8Array([0xFF, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18]), // ┤ (right T-junction)
  136: new Uint8Array([0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x18, 0x18]), // ┬ (top T-junction)
  137: new Uint8Array([0x18, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00]), // ┴ (bottom T-junction)
  138: new Uint8Array([0x18, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0x18, 0x18]), // ┼ (cross junction)

  // Additional box drawing characters (139-159)
  139: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF]), // ─ (thick horizontal)
  140: new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00]), // ─ (thick horizontal)
  141: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF]), // ┌ (thick corner)
  142: new Uint8Array([0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // └ (thick corner)
  143: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF]), // ┌ (thin corner)
  144: new Uint8Array([0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // └ (thin corner)
  145: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00]), // ┐ (thin corner)
  146: new Uint8Array([0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ┘ (thin corner)
  147: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00]), // ─ (dashed)
  148: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00]), // ─ (dashed)
  149: new Uint8Array([0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00]), // ─ (dashed)
  150: new Uint8Array([0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (dashed)
  151: new Uint8Array([0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (dashed)
  152: new Uint8Array([0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (dashed)
  153: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  154: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  155: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  156: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  157: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  158: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  159: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)

  // Arrow and Directional Characters (160-175)
  160: new Uint8Array([0x18, 0x3C, 0x7E, 0xFF, 0x18, 0x18, 0x18, 0x18]), // ↑ (up arrow)
  161: new Uint8Array([0x18, 0x18, 0x18, 0x18, 0xFF, 0x7E, 0x3C, 0x18]), // ↓ (down arrow)
  162: new Uint8Array([0x18, 0x30, 0x7F, 0xFF, 0x7F, 0x30, 0x18, 0x00]), // ← (left arrow)
  163: new Uint8Array([0x00, 0x18, 0x0C, 0xFE, 0xFF, 0x0C, 0x18, 0x00]), // → (right arrow)
  164: new Uint8Array([0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0x00, 0x00]), // ↗ (diagonal up-right)
  165: new Uint8Array([0x00, 0x00, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00]), // ↙ (diagonal down-left)
  166: new Uint8Array([0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00]), // ↖ (diagonal up-left)
  167: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFF]), // ↘ (diagonal down-right)
  168: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  169: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  170: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  171: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  172: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  173: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  174: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)
  175: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ─ (empty)

  // Runic Alphabet Characters (176-207) - Based on late Anglian "futhorc"
  // These are simplified but recognizable runic patterns
  176: new Uint8Array([0x3C, 0x42, 0x81, 0x81, 0x81, 0x42, 0x3C, 0x00]), // ᚠ (feoh)
  177: new Uint8Array([0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00]), // ᚢ (ur)
  178: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00]), // ᚦ (thorn)
  179: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00]), // ᚩ (os)
  180: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00]), // ᚱ (rad)
  181: new Uint8Array([0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00]), // ᚳ (cen)
  182: new Uint8Array([0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᚷ (gyfu)
  183: new Uint8Array([0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᚹ (wynn)
  184: new Uint8Array([0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᚻ (haegl)
  185: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF]), // ᚾ (nyd)
  186: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00]), // ᛁ (is)
  187: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00]), // ᛂ (ger)
  188: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00]), // ᛇ (eoh)
  189: new Uint8Array([0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00]), // ᛉ (peorth)
  190: new Uint8Array([0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛋ (sigel)
  191: new Uint8Array([0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛏ (tir)
  192: new Uint8Array([0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛒ (beorc)
  193: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛖ (eh)
  194: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛗ (man)
  195: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛚ (lagu)
  196: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛝ (ing)
  197: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛟ (oe)
  198: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛞ (daeg)
  199: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛠ (ac)
  200: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛡ (aesc)
  201: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛢ (yr)
  202: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛣ (ior)
  203: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛤ (ear)
  204: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛥ (cweorth)
  205: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛦ (calc)
  206: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛧ (stan)
  207: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // ᛨ (gar)

  // Special Symbols and Graphics (208-255)
  208: new Uint8Array([0x00, 0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x3C, 0x00]), // ● (filled circle)
  209: new Uint8Array([0x00, 0x3C, 0x42, 0x81, 0x81, 0x42, 0x3C, 0x00]), // ○ (empty circle)
  210: new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]), // ■ (filled square)
  211: new Uint8Array([0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81]), // □ (empty square)
  212: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  213: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  214: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  215: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  216: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  217: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  218: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  219: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  220: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  221: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  222: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  223: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  224: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  225: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  226: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  227: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  228: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  229: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  230: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  231: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  232: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  233: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  234: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  235: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  236: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  237: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  238: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  239: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  240: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  241: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  242: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  243: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  244: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  245: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  246: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  247: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  248: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  249: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  250: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  251: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  252: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  253: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  254: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
  255: new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), // █ (block)
};

/**
 * Get bitmap data for a specific character code
 */
export function getFont3Bitmap(code: number): Uint8Array | undefined {
  return FONT3_BITMAPS[code];
}

/**
 * Check if bitmap data exists for a character code
 */
export function hasFont3Bitmap(code: number): boolean {
  return code in FONT3_BITMAPS;
}

/**
 * Get all available bitmap codes
 */
export function getAvailableFont3Codes(): number[] {
  return Object.keys(FONT3_BITMAPS).map(Number);
}
